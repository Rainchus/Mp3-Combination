Given the nature of how this is written (many asm hooks to new C implementations),
it's hard to follow how this all works together. This document attempts to explain that

A general overview of the overlay system:
Each n64 mario party has an overlay table named _ovltbl in the decomps. This overlay -
table holds section information for each overlay in this struct format

typedef struct OverlayTable {
/* 0x00 */ u8* romStart;
/* 0x04 */ u8* romEnd;
/* 0x08 */ u8* vramStart;
/* 0x0C */ u8* textVramStart;
/* 0x10 */ u8* textVramEnd;
/* 0x14 */ u8* dataVramStart;
/* 0x18 */ u8* dataVramEnd;
/* 0x1C */ u8* bssVramStart;
/* 0x20 */ u8* bssVramEnd;
} OverlayTable; //sizeof 0x24

The way the game loads into these overlays is generally with omOvlGotoEx.
However for some things such as the results scene after a minigame, -
it is called automatically by omOvlReturnEx.
This function also makes use of the omovlhis and omovlhisidx variables, -
which track the history of overlays and the current index into that list respectively.

The base game used is mario party 3, so mario party 3 always boots initially.
From here, we run some boot up code to dma all of our code and data from rom to ram, -
as well as making this only happen on the initial boot up by faking a warm boot each time after.

After some initial boot up, the boot logos overlay is loaded.
These moidifed overlays handle the bulk of the game swapping code. The other piece of the game swapping code -
is located in the respective game's minigame general functions overlay file (2 overlays in the case of mp2)
For each game, I have entirely decompiled the boot overlay so it's easier to modify.
For mp3, it loads the entry function of the boot overlay from D_80105EE0_3D7690_name_58, -
which is the following struct:

typedef struct OvlEntrypoint {
/* 0x00 */ s16 index;
/* 0x04 */ void (*fn)(void);
} OvlEntrypoint; //sizeof 0x08

So from here, when this initial boot logos overlay is loaded, it calls the respective game's mpX_BootLogosEntryFunc.
